package batalhanaval.gui;


import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;

import javax.swing.JPanel;

import batalhanaval.*;

@SuppressWarnings("serial")
public class PainelGrade extends JPanel {
	private JanelaPrincipal principal;
	private Jogador jogador;
	private Image fundo;
	private Dimension dim;
	private Rectangle clip;
	
	private int idNavioAtual;
	private int orientacaoAtual;
	private Point posicaoAtual;
	
	boolean mostrarNavios;

	public PainelGrade(JanelaPrincipal p, Jogador j, Image f) {
		principal = p;
		jogador = j;
		fundo = f;
		dim = new Dimension(300, 300);
		setPreferredSize(dim);

		clip = new Rectangle(dim);

		// Quadrado onde o ponteiro está
		posicaoAtual = new Point(0, 0);
		
		// Atual navio sendo posicionado
		if (!(jogador instanceof Robo)) {
			idNavioAtual = 2;
			orientacaoAtual = Navio.HORIZONTAL;
			jogador.getNavio(idNavioAtual).setPosicao(posicaoAtual);
		}
		
		TratadorMouse tm = new TratadorMouse();
		addMouseListener(tm);
		
		if (!(jogador instanceof Robo))		
			addMouseMotionListener(tm);

		// Mostrar navios?
		mostrarNavios = (jogador instanceof Robo ? false : true);
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
//		g.setClip(clip);
		g.drawImage(fundo, 0, 0, null);
		g.setColor(Color.BLUE);
		g.drawRect(0, 0, this.getWidth()-1, this.getHeight()-1);
		for (int i = 1; i < 11; i++) {
			g.drawLine(i * 30, 0, i * 30, 300);
			g.drawLine(0, i * 30, 300, i * 30);
		}

//		clip.setSize(30, 30);
//		clip.setLocation(posicaoAtual.x*30, posicaoAtual.y*30);

		jogador.getTabuleiro().getMapa();
		for (Navio navio : jogador.getFrota()) {
			if (navio.getPosicao() != null)
				if (mostrarNavios || navio.estaDestruido())
					g.drawImage(principal.getImagemNavio(navio.getId(),
							navio.getOrientacao()),
							navio.getPosicao().x*30,
							navio.getPosicao().y*30, null);
		}
		
//		if (mostrarNavios && jogador.getJogo().getEstado() == Jogo.POSICIONANDO_NAVIOS) {
//			Navio navio = jogador.getNavio(idNavioAtual);
//			g.drawImage(principal.getImagemNavio(navio.getId(), navio.getOrientacao()),
//					navio.getPosicao().x*30, navio.getPosicao().y*30, null);
//		}

		for (Point pt : jogador.getJogo().getOponente(jogador).getTiros()) {
			int valor = jogador.getTabuleiro().getPosicao(pt.x, pt.y);
			if (valor == -1) {
				g.drawImage(principal.getImagemAgua(), pt.x*30, pt.y*30, null);
			} else if (valor < 0) {
				g.drawImage(principal.getImagemFogo(), pt.x*30, pt.y*30, null);
			}
		}
	}

	private class TratadorMouse implements MouseListener, MouseMotionListener {
		PainelGrade painel = PainelGrade.this;
		@Override
		public void mouseClicked(MouseEvent e) {
			if ((e.getModifiers() & InputEvent.BUTTON3_MASK)
					== InputEvent.BUTTON3_MASK  // Botão direito?
					&& jogador.getJogo().getEstado() == Jogo.POSICIONANDO_NAVIOS) {
				int orientacaoAntiga = orientacaoAtual;
				orientacaoAtual = (orientacaoAtual == Navio.VERTICAL
						? Navio.HORIZONTAL
						: Navio.VERTICAL);
				painel.jogador.getNavio(idNavioAtual).setOrientacao(orientacaoAtual);
				if (!painel.jogador.getTabuleiro().cabeNavio(
						jogador.getNavio(idNavioAtual))) {
					painel.jogador.getNavio(idNavioAtual).setOrientacao(
							orientacaoAntiga);
				}

				painel.repaint();
			} else if (idNavioAtual < 32) {
				painel.jogador.getTabuleiro().adicionaNavio(
						jogador.getNavio(idNavioAtual));
				if (idNavioAtual == 32) {
					painel.jogador.getJogo().setEstado(Jogo.VEZ_JOG1);
				}		
			} else if (jogador.getJogo().getEstado()
					== Jogo.POSICIONANDO_NAVIOS) {
				painel.jogador.getJogo().setEstado(Jogo.VEZ_JOG1);
			} else {
				Point pos = painel.posicaoAtual;
				//painel.jogador.getJogo().getOponente(jogador).atira(pos.x, pos.y);
			}
		}

		@Override
		public void mouseMoved(MouseEvent e) {
			Point pos = painel.posicaoAtual;
			if (pos.x != e.getX()/30 || pos.y != e.getY()/30) {
				painel.posicaoAtual = new Point(e.getX() / 30, e
						.getY() / 30);
				if (painel.jogador.getJogo().getEstado() == Jogo.POSICIONANDO_NAVIOS) {
					System.err.println(idNavioAtual);
					Point posAntiga = painel.jogador.getNavio(idNavioAtual).getPosicao();
					painel.jogador.getNavio(idNavioAtual).setPosicao(posicaoAtual);
					if (!painel.jogador.getTabuleiro().cabeNavio(
							jogador.getNavio(idNavioAtual))) {
						painel.jogador.getNavio(idNavioAtual).setPosicao(posAntiga);
					}
					// PainelGrade.this.repaint();
					painel.repaint();
				} else if (painel.jogador.getJogo().getEstado() != Jogo.TERMINADO){
					
				}
			}
		}

		@Override
		public void mouseDragged(MouseEvent e) { mouseMoved(e); }

		// Métodos não usados
		@Override
		public void mouseEntered(MouseEvent e) {}
		@Override
		public void mouseExited(MouseEvent e) {}
		@Override
		public void mousePressed(MouseEvent e) {}
		@Override
		public void mouseReleased(MouseEvent e) {}
	}
}
