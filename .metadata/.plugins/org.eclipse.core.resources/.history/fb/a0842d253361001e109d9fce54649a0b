package batalhanaval.gui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JPanel;

import batalhanaval.Jogador;

@SuppressWarnings("serial")
public class PainelGrade extends JPanel {
	private JanelaPrincipal principal;
	private Jogador jogador;
	private Image fundo;
	private Dimension dim;
	private Rectangle clip;
	private Point posicaoAtual;

	public PainelGrade(JanelaPrincipal p, Jogador j, Image f) {
		principal = p;
		jogador = j;
		fundo = f;
		dim = new Dimension(300, 300);
		setPreferredSize(dim);

		clip = new Rectangle(dim);
		// Quadrado onde o ponteiro está
		posicaoAtual = new Point(0, 0);
		
		TratadorMouse tm = new TratadorMouse();
		addMouseListener(tm);
		addMouseMotionListener(tm);

		// Carrega as imagens do disco
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
//		g.setClip(clip);
		g.drawImage(fundo, 0, 0, null);
		g.setColor(Color.BLUE);
		g.drawRect(0, 0, this.getWidth()-1, this.getHeight()-1);
		for (int i = 1; i < 11; i++) {
			g.drawLine(i * 30, 0, i * 30, 300);
			g.drawLine(0, i * 30, 300, i * 30);
		}

//		clip.setSize(30, 30);
//		clip.setLocation(posicaoAtual.x*30, posicaoAtual.y*30);

		int[][] mapa = jogador.getTabuleiro().getMapa();
		for (int i = 0; i < mapa[0].length; i++) {
			for (int j = 0; j < mapa.length; j++) {
				if (jogador.getTabuleiro().getPosicao(i, j) == 1) {
					g.drawImage(principal.getImagemAgua(), i*30, j*30, null);
				}
			}
		}
	}

	private class TratadorMouse implements MouseListener, MouseMotionListener {
		@Override
		public void mouseClicked(MouseEvent e) {
			principal.mostraEvento("Mouse clicado: " + e.getX() / 30 + ","
					+ e.getY() / 30);
		}

		@Override
		public void mouseMoved(MouseEvent e) {
			Point pos = PainelGrade.this.posicaoAtual;
			if (pos.x != e.getX() || pos.y != e.getY()) {
				PainelGrade.this.repaint(posicaoAtual.x*30, posicaoAtual.y*30, 30, 90);
//				PainelGrade.this.repaint();
				PainelGrade.this.posicaoAtual = new Point(e.getX()/30, e.getY()/30);
//				PainelGrade.this.repaint();
				PainelGrade.this.repaint(posicaoAtual.x*30, posicaoAtual.y*30, 30, 90);
			}
		}
        
        // Métodos não usados
		@Override
		public void mouseEntered(MouseEvent e) {}
		@Override
		public void mouseExited(MouseEvent e) {}
		@Override
		public void mousePressed(MouseEvent e) {}
		@Override
		public void mouseReleased(MouseEvent e) {}
		@Override
		public void mouseDragged(MouseEvent e) {}
    }
}
