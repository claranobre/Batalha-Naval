package batalhanaval;

import java.awt.Point;
import java.util.ArrayList;

/**
 * Jogador de batalha naval.
 * 
 * @param jogo
 * 
 */

public class Jogador {
	// Níveis de dificuldade
	private static final int FACIL = 0;
	private static final int MEDIO = 1;
	private static final int DIFICIL = 2;

	private Jogo jogo;
	private Tabuleiro tabuleiro;
	private Navio[] frota;

	private ArrayList<Integer> tiros;

	private int frotaRestante;
	private int dificuldade;

	/**
	 * Cria um novo jogador para o jogo.
	 * 
	 * @param jogo
	 *            Jogo do qual o jogador participa.
	 */

	public Jogador(Jogo jogo) {
		this.jogo = jogo;
		this.tabuleiro = new Tabuleiro(10, 10); // Tabuleiro zerado
		this.frota = new Navio[5];

		this.tiros = new ArrayList<Integer>();

		frota[0] = new BarcoPatrulha(this);
		frota[1] = new Destroier(this);
		frota[2] = new Submarino(this);
		frota[3] = new Encouracado(this);
		frota[4] = new PortaAvioes(this);

		for (int i = 0; i < frota.length; i++)
			this.frotaRestante += frota[i].getId();
	}

	/**
	 * 
	 */
	public Jogador(Jogo jogo, int nivel) {
		this(jogo);
		dificuldade = nivel;
	}

	/**
	 * Atira num ponto determinado.
	 * 
	 * @param linha
	 * @param coluna
	 */
	public int atira(int linha, int coluna) throws Exception {
		int valorAtual = jogo.getOponente(this).getTabuleiro().getPosicao(
				linha, coluna);

		// Quadrado não atingido?
		if (valorAtual >= 1) {
			tiros.add(valorAtual);
			jogo.getOponente(this).getTabuleiro().setPosicao(linha, coluna, -valorAtual);
			if (valorAtual > 1 && jogo.getOponente(this).getNavio(valorAtual).estaDestruido()) {
				jogo.getOponente(this).destroiNavio(valorAtual);
			}
		} else {
			throw new Exception("Posição já clicada!");
		}

		return valorAtual;
	}

	/**
	 * 
	 * Atira automaticamente, através de inteligência artificial.
	 * 
	 */
	public int atira() {
		return 1;
	}

	public void posicionaNavio(Point[] pos, int id) {
		getNavio(id).setPosicao(pos);
	}

	private void destroiNavio(int id) {
		frotaRestante -= id;
	}

	public Jogo getJogo() {
		return jogo;
	}

	public Tabuleiro getTabuleiro() {
		return tabuleiro;
	}

	public Navio getNavio(int id) {
		for (int i = 0; i < frota.length; i++) {
			if (frota[i].getId() == id)
				return frota[i];
		}
		return null;
	}

	public ArrayList<Integer> getTiros() {
		return tiros;
	}

	public int getFrotaRestante() {
		return frotaRestante;
	}
}
